// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  Telegram
  Whatsapp
}

enum ChannelStatus {
  Connected
  Connecting
  Error
}

model Channel {
  id        Int           @id @default(autoincrement())
  projectId Int
  name      String
  type      ChannelType
  status    ChannelStatus
  token     String
  chats     Chat[]
  approval  Approval[]

  @@unique([projectId, id])
}

model Contact {
  chatId    Int     @id
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  username  String
  name      String
  avatarUrl String?
}

model Chat {
  id        Int       @id @default(autoincrement())
  channelId Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  contact   Contact?
  accountId String    @unique
  isNew     Boolean   @default(true)
  messages  Message[]
}

enum MessageStatus {
  Accepted
  Delivered
  Read
  Error
}

model Message {
  id         Int           @id @default(autoincrement())
  chatId     Int
  chat       Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  fromMe     Boolean
  status     MessageStatus
  externalId String        @unique
  content    Content[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Content {
  id          Int          @id @default(autoincrement())
  messageId   Int
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  text        String?
  attachments Attachment[]
  buttons     Json?
}

enum AttachmentType {
  Audio
  Document
  Image
  Video
}

model Attachment {
  id        Int            @id @default(autoincrement())
  contentId Int
  content   Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  type      AttachmentType
  url       String
  name      String?
}

model TemplateMessage {
  id        Int        @id @default(autoincrement())
  projectId Int
  code      String
  approval  Approval[]
  text      String
  buttons   Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([projectId, id])
  @@unique([projectId, code])
}

enum ApprovalStatus {
  Approved
  Pending
  Declined
}

model Approval {
  channelId  Int
  channel    Channel         @relation(fields: [channelId], references: [id])
  templateId Int
  template   TemplateMessage @relation(fields: [templateId], references: [id])
  status     ApprovalStatus

  @@id([channelId, templateId])
}

enum WebhookEventType {
  NewChats
  IncomingMessages
  OutgoingMessages
  All
}

model Webhook {
  id        Int              @id @default(autoincrement())
  projectId Int
  name      String
  url       String
  eventType WebhookEventType

  @@unique([projectId, id])
}
