// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  Instagram
  Telegram
  Vkontakte
  Webchat
  Whatsapp
}

enum ChannelStatus {
  Connected
  Failed
}

model Channel {
  id           Int           @id @default(autoincrement())
  projectId    Int
  type         ChannelType
  name         String
  accountId    String        @unique
  token        Json
  status       ChannelStatus
  failedReason String?
  chats        Chat[]
  approval     Approval[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([projectId, id])
  @@index([projectId])
}

model Chat {
  projectId   Int
  channelId   Int
  channel     Channel   @relation(fields: [channelId], references: [id])
  accountId   String
  isNew       Boolean   @default(true)
  unreadCount Int       @default(0)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([channelId, accountId])
  @@unique([projectId, channelId, accountId])
}

enum MessageStatus {
  Submitted
  Delivered
  Read
  Failed
}

model Message {
  id           Int           @id @default(autoincrement())
  projectId    Int
  channelId    Int
  accountId    String
  chat         Chat          @relation(fields: [channelId, accountId], references: [channelId, accountId], onDelete: Cascade)
  fromMe       Boolean
  status       MessageStatus
  failedReason String?
  externalId   String
  content      Content[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([projectId, channelId, accountId, id])
  @@unique([channelId, accountId, id])
  @@unique([channelId, accountId, externalId])
}

model Content {
  id          Int          @id @default(autoincrement())
  messageId   Int
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  text        String?
  attachments Attachment[]
  buttons     Json         @default("[]")
}

enum AttachmentType {
  Audio
  Document
  Image
  Video
}

model Attachment {
  id        Int            @id @default(autoincrement())
  contentId Int
  content   Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  type      AttachmentType
  url       String
  name      String?

  @@index([type])
}

model Hsm {
  id          Int        @id @default(autoincrement())
  projectId   Int
  code        String
  approval    Approval[]
  text        String
  attachments Json       @default("[]")
  buttons     Json       @default("[]")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([projectId, id])
  @@unique([projectId, code])
  @@index([projectId])
}

enum ApprovalStatus {
  Submitted
  Approved
  Rejected
}

model Approval {
  channelId      Int
  channel        Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  hsmId          Int
  hsm            Hsm            @relation(fields: [hsmId], references: [id], onDelete: Cascade)
  externalId     String?
  status         ApprovalStatus
  rejectedReason String?

  @@id([channelId, hsmId])
}
